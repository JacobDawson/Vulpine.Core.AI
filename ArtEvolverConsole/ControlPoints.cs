using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using ArtEvolver;

using Vulpine.Core.Draw;
using Vulpine.Core.Draw.Textures;

using Vulpine.Core.Calc;
using Vulpine.Core.Calc.RandGen;
using Vulpine.Core.Calc.Matrices;

namespace ArtEvolverConsole
{
    public static class ControlPoints
    {
        public const string FILE_IN = @"S:\Animation\_Source\12171.jpg";

        private static int[] foxpoints;

        private static List<SubPixel> data;


        public static double GradeImage(Texture tex)
        {
            double total = 0.0;
            Console.Write(".");

            foreach (var sample in data)
            {
                double u = sample.PosX;
                double v = sample.PosY;

                Color ct = sample.Color;
                Color cs = tex.Sample(u, v);

                Vector vt = ct.ToYUV();
                Vector vs = cs.ToYUV();

                double y = vt[0] - vs[0];
                double a = vt[1] - vs[1];
                double b = vt[2] - vs[2];

                double t = (y * y * 2.0) + (a * a) + (b * b);
                total = total + t;
            }

            total = (16000.0 - total) / 16000.0;
            if (total < 0.00001) total = 0.00001;

            return total;         
        }

        public static void BuildData()
        {
            BuildFox();

            if (data != null) return;
            data = new List<SubPixel>(foxpoints.Length * 5);

            var bmp = new System.Drawing.Bitmap(FILE_IN);
            ImageSys img = new ImageSys(bmp);
            Texture txt = new Interpolent(img, Intpol.Sinc3);

            VRandom rng = new RandMT();
            double u, v;
            

            for (int i = 0; i < foxpoints.Length; i += 2)
            {
                double x = foxpoints[i];
                double y = foxpoints[i + 1];

                u = ((2.0 * x) - 256.0) / 256.0;
                v = ((2.0 * y) - 256.0) / 256.0;

                Color c = txt.Sample(u, -v);
                data.Add(new SubPixel(u, -v, c));

                for (int j = 0; j < 4; j++)
                {
                    double xp = x + rng.RandGauss() * 0.5;
                    double yp = y + rng.RandGauss() * 0.5;

                    u = ((2.0 * xp) - 256.0) / 256.0;
                    v = ((2.0 * yp) - 256.0) / 256.0;

                    Color cp = txt.Sample(u, -v);
                    data.Add(new SubPixel(u, -v, cp));
                }

            }

            bmp.Dispose();
        }

        #region Fox Points...

        private static void BuildFox()
        {
            if (foxpoints != null) return;

            foxpoints = new int[]
            {
                130, 128, 140, 127, 124, 130, 128, 123, 120, 133, 149, 126, 156, 125, 162, 124,
                138, 123, 132, 132, 122, 127, 154, 129, 141, 132, 127, 135, 145, 122, 153, 122,
                117, 130, 117, 135, 123, 136, 146, 129, 132, 125, 135, 129, 112, 137, 105, 139,
                 96, 142,  89, 144,  98, 135, 104, 129, 112, 122, 121, 116, 128, 113, 136, 111,
                145, 110, 152, 106, 155, 111, 158, 108, 166, 107,  36, 136,  40, 136,  35, 144,
                 39, 144,  37, 140,  43, 131,  53, 127,  64, 123,  75, 119,  86, 114,  96, 107,
                103,  99, 112,  91, 123,  86, 135,  84, 147,  83, 160,  84, 174,  82, 185,  76,
                192,  70, 199,  67, 199,  78, 196,  87, 194,  96, 203,  98, 206, 104, 216,  97,
                225,  88, 235,  79, 239,  73, 231,  93, 225, 104, 221, 113, 216, 122, 211, 137,
                213, 147, 215, 160, 216, 171, 216, 184, 214, 198, 210, 213, 204, 231, 196, 248,
                114, 252, 104, 214,  96, 230,  92, 214,  96, 200, 103, 188, 104, 177, 100, 173,
                 93, 170,  86, 196,  75, 166,  66, 163,  55, 158,  43, 153,  49, 137,  49, 146,
                 56, 133,  62, 132,  56, 150,  66, 155,  76, 159,  72, 152,  68, 154,  64, 138,
                 57, 140,  63, 148,  52, 142,  59, 145, 194,  75, 188,  80, 193,  82, 182,  84,
                190,  87, 184,  89, 176,  90, 187,  94,  80, 146, 178,  98, 194, 105, 232,  84,
                228,  91, 223,  98, 218, 105, 210, 110, 215, 114, 209, 116, 202, 117, 209, 122,
                172, 116, 181, 116, 190, 119, 183, 106, 192, 111, 175, 109, 171, 124, 188, 128,
                179, 128, 166, 139, 175, 142, 184, 145, 162, 154, 171, 156, 179, 159, 158, 176,
                165, 170, 172, 173, 152, 180, 161, 179, 164, 185, 146, 191, 157, 195, 139, 201,
                148, 205, 133, 207, 140, 213, 126, 212, 129, 220, 111, 214, 111, 221,  79, 211,
                 78, 217,  70, 207,  66, 212,  55, 198,  50, 201,  41, 185,  37, 187,  29, 167,
                 23, 169,  20, 148,  14, 149,  15, 126,   9, 126,   9, 106,  14, 106,  12,  84,
                 18,  86,  20,  64,  26,  67,  31,  47,  36,  50,  46,  32,  50,  36,  62,  19,
                 60,  23,  78,   8,  81,  11,  91,   2, 157,   2, 154,   5, 169,  12, 165,  16,
                180,  24, 177,  27, 191,  36, 188,  39, 198,  46, 195,  48, 202,  61, 212,  66,
                209,  71, 217,  77, 212,  81, 219,  87, 213,  93, 216, 133, 223, 212, 221, 139,
                223, 130, 124, 252, 116, 243, 110, 233, 107, 226, 115, 206, 115, 196, 113, 184,
                105, 204, 107, 197,  98, 225, 101, 215,  72, 109,  77, 195,  83, 198, 102, 251,
                 96, 244,  91, 233,  87, 227,  86, 215,  85, 203,  89, 195,  94, 189,  97, 180,
                137, 250, 144, 247, 132, 243, 140, 240, 127, 234, 137, 230, 133, 236, 131, 227,
                128, 202, 132, 196, 127, 193, 130, 187, 128, 182, 123, 186, 122, 180, 117, 175,
                111, 171, 122, 175, 104, 168, 119, 190, 122, 201, 118, 229, 119, 237, 124, 246,
                108, 133, 113, 128, 120, 123, 134, 118, 142, 117, 150, 117, 159, 117,  71, 124,
                 83, 191,  94, 114, 103, 106, 111,  99, 120,  94, 130,  90, 142,  89, 153,  89,
                 75, 130,  80, 137,  84, 126,  93, 128,  97, 119, 106, 118, 110, 109, 119, 110,
                124, 102, 134, 105, 140,  97, 149, 102, 155,  96, 163,  98, 179, 252, 188, 214,
                196, 230, 202, 218, 207, 204, 209, 191, 210, 178, 210, 166, 208, 154, 205, 142,
                 89, 158, 103, 105, 120, 146, 137, 143, 152, 139, 151, 152, 145, 196, 138, 181,
                129, 169, 111, 161,  99, 157, 121, 156, 137, 156, 201, 126, 194, 145, 193, 158,
                158, 170, 197, 173, 178, 185, 169, 196, 161, 207, 152, 222, 158, 236, 168, 243,
                182, 234, 189, 221, 193, 206, 196, 198, 189, 180, 183, 197, 173, 206, 183, 204,
                170, 223,   8,   8,  39,   8,  10,  45,  21,  25, 120,   8,  96,  21, 137,  18,
                 74,  37, 117,  36, 115,  31, 160,  53, 139,  46,  96,  46,  66,  60,  62,  45,
                 41,  71,  66,  80,  45,  91,  31, 111,  59, 104,  93,  68, 122,  58, 183,   6,
                246,   7, 215,   7, 199,  18, 246,  38, 230,  22, 215,  32, 230,  45, 243, 107,
                241, 135, 230, 157, 247, 165, 248, 196, 248, 228, 231, 245, 220, 230, 229, 208, 
                232, 179,  10, 245,   7,  67,   4, 155,  74, 229,  84, 249,  46, 246,   8, 220,
                  7, 191,  18, 177,  36, 203,  55, 219,  28, 226,  20, 206,  77, 105,  90,  94,
                103,  85, 118,  77, 135,  74, 228,  63, 167,  70, 184,  57, 144, 126, 126, 126,
                128, 131, 136, 126, 119, 217,  38, 133,  37, 147,  42, 164,  56, 175,  81, 178,
                204,  85,
            };
        }

        #endregion
    }
}
